export declare enum GErrorKey {
    ApiNotSupport = "%ApiNotSupport",
    AppNotInstalled = "%AppNotInstalled",
    ArgKeyValueNotSet = "%ArgKeyValueNotSet",
    AttributeNameEmpty = "%AttributeNameEmpty",
    AttributeNamesEmpty = "%AttributeNamesEmpty",
    BrowserNotFound = "%BrowserNotFound",
    CannotFindNewTab = "%CannotFindNewTab",
    CheckableElementNotFound = "%CheckableElementNotFound",
    DeviceNotFound = "%DeviceNotFound",
    DisabledElementErr = "%DisabledElementErr",
    ElementNotEnabledOrDisplayed = "%ElementNotEnabledOrDisplayed",
    ElementNotFound = "%ElementNotFound",
    ElementNotSupport = "%ElementNotSupport",
    EmptySelectControl = "%EmptySelectControl",
    EnterDisableElementErr = "%EnterDisableElementErr",
    FilePathEmpty = "%FilePathEmpty",
    HelperNotFound = "%HelperNotFound",
    InvalidBooleanValue = "%InvalidBooleanValue",
    InvalidElementProperty = "%InvalidElementProperty",
    InvalidInputArg = "%InvalidInputArg",
    InvalidMultiSelect = "%InvalidMultiSelect",
    InvalidOptionValue = "%InvalidOptionValue",
    InvalidSelectOptionIndex = "%InvalidSelectOptionIndex",
    InvalidSelectOptionStrategy = "%InvalidSelectOptionStrategy",
    InvalidSelectTag = "%InvalidSelectTag",
    InvalidValue = "%InvalidValue",
    LocatorEmpty = "%LocatorEmpty",
    MethodNotAvailableError = "%MethodNotAvailableError",
    MochawsomeConfigNotFound = "%MochawsomeConfigNotFound",
    NegativeNumber = "%NegativeNumber",
    NotApp = "%NotApp",
    NotMultiremote = "%NotMultiremote",
    PopupNotFound = "%PopupNotFound",
    PropertyNameEmpty = "%PropertyNameEmpty",
    SelectTagNotFound = "%SelectTagNotFound",
    SwipeOffofScreen = "%SwipeOffofScreen",
    TimeoutForClickable = "%TimeoutForClickable",
    TimeOutForElementHasProptery = "%TimeOutForElementHasProperty",
    TimeoutForEnabled = "%TimeoutForEnabled",
    TimeoutForValueChange = "%TimeoutForValueChange",
    UnsupportedContext = "%UnsupportedContext",
    UsingCSSLocatorInApp = "%UsingCSSLocatorInApp",
    UsingNameLocatorInNative = "%UsingNameLocatorInNative",
    ValueNotMatch = "%ValueNotMatch",
    ValueNotMatchAtIndex = "%ValueNotMatchAtIndex",
    ValueNotSupport = "%ValueNotSupport",
    KeyEmpty = "%KeyEmpty",
    ItemNotFound = "%ItemNotFound",
    FileNotSupported = "%FileNotSupported",
    CookieHasNoNameOrValue = "%CookieHasNoNameOrValue",
    TypeOfCookiePropertyNotString = "%TypeOfCookiePropertyNotString"
}
export declare class GError extends Error {
    constructor(errKey: GErrorKey, ...args: any[]);
}
export declare class AppNotInstalled extends GError {
    constructor(appBundleId: string);
}
export declare class NotAppError extends GError {
    constructor();
}
export declare class LocatorEmptyError extends GError {
    constructor();
}
export declare class KeyEmptyError extends GError {
    constructor();
}
export declare class CookiePropertyError extends GError {
    constructor();
}
export declare class TypeOfCookiePropertyError extends GError {
    constructor();
}
export declare class NotMultiremoteError extends GError {
    constructor();
}
export declare class BrowserNotFoundError extends GError {
    constructor();
}
export declare class MochawsomeCfNotFoundError extends GError {
    constructor();
}
export declare class NegativeNumberError extends GError {
    constructor();
}
export declare class ElementNotFoundError extends GError {
    constructor(element: string);
}
export declare class FilePathEmptyError extends GError {
    constructor();
}
export declare class ApiNotSupportError extends GError {
    constructor(apiName: string);
}
export declare class DeviceNotFoundError extends GError {
    constructor(deviceName: string);
}
export declare class InvalidBooleanValueError extends GError {
    constructor(value: any);
}
export declare class InvalidElementPropertyError extends GError {
    constructor(locator: any, propName: any);
}
export declare class InvalidOptionValueError extends GError {
    constructor(value: any);
}
export declare class InvalidInputArgumentError extends GError {
    constructor(argumentName: any);
}
export declare class ValueNotMatchError extends GError {
    constructor(argumentName: any);
}
export declare class ValueNotMatchAtIndexError extends GError {
    constructor(argumentName: any);
}
export declare class ElementNotSupportError extends GError {
    constructor(element: string);
}
export declare class MethodNotAvailableError extends GError {
    constructor(methodName: string, helperName: string);
}
export declare class EmptySelectControl extends GError {
    constructor();
}
export declare class InvalidSelectOptionIndex extends GError {
    constructor(index: number, realLength: number);
}
export declare class InvalidSelectOptionStrategy extends GError {
    constructor(index: number);
}
export declare class ValueNotSupport extends GError {
    constructor(argumentName: string, validValue: any);
}
export declare class CannotFindNewTabError extends GError {
    constructor();
}
