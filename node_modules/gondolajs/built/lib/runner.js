"use strict";var __importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(exports,"__esModule",{value:!0});const event=require("codeceptjs").event,output=require("codeceptjs").output,helper=require("codeceptjs").helper,Step=require("codeceptjs/lib/step"),requireg=require("requireg"),childProcess=__importStar(require("child_process")),Secret=require("codeceptjs/lib/secret"),fs=__importStar(require("fs")),path=__importStar(require("path")),statistic_1=require("../statistics/statistic"),telemetry_1=require("../telemetry"),util_1=require("../util");Step.prototype.toString=function(){return this.actor="gondola",`${this.prefix}${this.actor} ${this.humanize()} ${this.humanizeArgs()}${this.suffix}`},Step.prototype.humanizeArgs=function(){return this.args.map(e=>{if("string"==typeof e)return`"${e}"`;if(Array.isArray(e))try{return JSON.stringify(e)}catch(t){return`[${e.toString()}]`}else{if("function"==typeof e)return e.toString();if(void 0===e)return""+e;if(null===e)return""+e;if(e instanceof Secret)return"*****";if(e.toString&&"[object Object]"!==e.toString())return e.toString();if("object"==typeof e)return JSON.stringify(e)}return e}).join(", ")};const oldPrint=output.print;output.print=e=>{if(0===e.indexOf("CodeceptJS v")){e="Gondola v"+util_1.getGondolaVersion()}oldPrint(e)};const argv=process.argv;let tokenInfo="",serverInfo="",tokenLocation="User cache";if(argv.includes("--licenseToken")){let e=!1;const t=argv.indexOf("--licenseToken");if(t+1<argv.length){const n=argv[t+1];n&&"-"!==n.charAt(0)&&(tokenInfo=argv[t+1],argv.splice(t,2),e=!0)}tokenLocation="Command argument --licenseToken",!1===e&&(console.log("[31m%s[0m","Value for require argument --licenseToken cannot be empty."),process.exit())}else""!==process.env.G_LS_TOKEN&&void 0!==process.env.G_LS_TOKEN?(tokenInfo=process.env.G_LS_TOKEN,""!==tokenInfo&&(tokenLocation="Environment variable G_LS_TOKEN")):(tokenInfo=util_1.getTokenInfo(),""!==tokenInfo&&(tokenLocation="JSON configuration file"));if(argv.includes("--licenseServer")){let e=!1;const t=argv.indexOf("--licenseServer");if(t+1<argv.length){const n=argv[t+1];n&&"-"!==n.charAt(0)&&(serverInfo=argv[t+1],argv.splice(t,2),e=!0)}!1===e&&(console.log("[31m%s[0m","Value for require argument --licenseServer cannot be empty."),process.exit())}else serverInfo=""!==process.env.G_LS_SERVER&&void 0!==process.env.G_LS_SERVER?process.env.G_LS_SERVER:util_1.getLSInfo();const printAdditionalInfo=()=>{""!==tokenLocation&&(console.log("Additional Information"),console.log("%s%s","- Gondola version: ",util_1.getGondolaVersion()),console.log("%s%s","- Token location: ",tokenLocation))},lsFile=path.join(__dirname,"../../bin/check-license.js");fs.existsSync(lsFile)||(console.log("[31m%s[0m","The Gondola package is corrupt, please follow the steps here to restore it."),process.exit());const fork=childProcess.fork(lsFile,[],{detached:!0,env:{token:tokenInfo,agent_type:util_1.getAgentType(),info:serverInfo,GS_DEBUG_MODE:process.env.GS_DEBUG_MODE,GS_TESTING_MODE:process.env.GS_TESTING_MODE},execArgv:[]}),stopLicense="stop";function stopChildProcess(){!0!==fork.killed&&!1!==fork.connected&&fork.send("stop")}process.on("SIGINT",()=>{process.exit()}),process.on("exit",()=>{stopChildProcess()}),fork.on("message",e=>{if(1===e.licenseState)console.log("[32m%s[0m","Connected to the license server successfully."),event.dispatcher.on(event.all.after,()=>{stopChildProcess()}),event.dispatcher.on(event.multiple.after,()=>{stopChildProcess()}),requireg("codeceptjs/bin/codecept");else{switch(e.licenseState){case-3:console.log("[31m%s[0m","Missed require arguments: --licenseToken");break;case-2:console.log("[31m%s[0m","Invalid license information, please check that your credentials are correct or contact gondola@logigear.com"),printAdditionalInfo();break;case 2:console.log("[31m%s[0m","The maximum number of active agents has been reached. Click https://gondolatest.com/en/pricing/ to purchase additional licenses."),printAdditionalInfo();break;default:console.log("[31m%s[0m","Failed to connect to license management server.")}process.exit()}});let cid,isCollectUserEnv=!0;async function sendStartTestEvent(){var e,t,n;if(telemetry_1.envInfo.cid=cid,util_1.isAllowedTelemetry()){const o=helper.helpers||(null===(e=helper.prototype)||void 0===e?void 0:e.helpers);let r={},s={};try{if(o){for(const[e,t]of Object.entries(o))"gondolahelper"!==e.toLowerCase()&&"mochawesome"!==e.toLowerCase()&&(s=t);s&&(r=null===(n=null===(t=s)||void 0===t?void 0:t.browser)||void 0===n?void 0:n.capabilities)}}catch(e){return}if(!r)return;const i=util_1.captureUserEnvironment(r),c={name:"telemetry",label:telemetry_1.EventName.StartTest,env:JSON.stringify(telemetry_1.envInfo),properties:JSON.stringify(i)};sendToChildProcess(fork,c)}}async function sendEndTestEvent(){const e=statistic_1.GStatistics.getInstance().getActionCounter().getCountData();if(telemetry_1.envInfo.cid=cid,util_1.isAllowedTelemetry()){const t={};e.forEach((e,n)=>{t[n]=e});const n={name:"telemetry",label:telemetry_1.EventName.EndTest,env:JSON.stringify(telemetry_1.envInfo),counter:JSON.stringify(t)};sendToChildProcess(fork,n)}statistic_1.GStatistics.getInstance().getActionCounter().clear()}async function sendToChildProcess(e,t){if(!0===e.killed||!1===e.connected)return;return new Promise(n=>{e.send(t,e=>{e?console.log("error: "+e):n()})})}event.dispatcher.on(event.test.started,async()=>{isCollectUserEnv&&(cid=await util_1.getMachineID(),sendStartTestEvent(),isCollectUserEnv=!1)}),event.dispatcher.on(event.all.after,()=>{sendEndTestEvent()}),event.dispatcher.on(event.multiple.after,()=>{sendEndTestEvent()});
//# sourceMappingURL=../../debug/lib/runner.js.map
