import { Client, RectReturn } from "webdriver";
import { Browser } from "webdriverio";
/**
 * Defines an element locator format
 */
export interface ILocator {
    id?: string;
    tagName?: string;
    className?: string;
    xpath?: string;
    css?: string;
    name?: string;
    value?: string;
    frame?: string;
    android?: string | ILocator;
    ios?: string | ILocator;
}
/**
 * Defines an error info
 */
export interface IErrorInfo {
    testCaseName: string;
    testStepName: string;
    errorMessage: string;
}
/**
 * Defines a coordinate
 */
export interface ICoordinate {
    x: number;
    y: number;
}
/**
 * Defines a rectangle
 */
export interface IRect {
    left: number;
    top: number;
    width: number;
    height: number;
}
/**
 * Defines a cookie
 */
export interface ICookie {
    name: string;
    value: string;
    path?: string;
    domain?: string;
    secure?: boolean;
    httpOnly?: boolean;
    expiry?: number;
    sameSite?: string;
}
/**
 * Defines scrolling options.
 * @field behavior - Defines the transition animation. Can be "auto" or "smooth". Defaults to "auto".
 * @field block - Defines vertical alignment. Can be "start", "center", "end", or "nearest". Defaults to "start".
 * @field inline - Defines horizontal alignment. Can be "start", "center", "end", or "nearest". Defaults to "nearest".
 */
export interface IScrollIntoViewOptions {
    behavior?: string;
    block?: string;
    inline?: string;
}
/**
 * Set of extended actions supported by Gondola
 */
export interface IGondolaWeb {
    /**
     * Clears an HTML &lt;textarea&gt; or text &lt;input&gt; element's value.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * const ele = "#elementLocator";
     * await gondola.clearField(ele);
     * ```
     */
    clearField(element: string | ILocator): void;
    /**
     * Closes the current tab
     * @example
     * ```typescript
     *
     * gondola.closeCurrentTab();
     * ```
     */
    closeCurrentTab(): void;
    /**
     * Closes all tabs except for the current one.
     * @example
     * ```typescript
     *
     * gondola.closeOtherTabs();
     * ```
     */
    closeOtherTabs(): void;
    /**
     * Clicks on a link or a button, identified by a locator.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string} context (optional) element to search in CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * await gondola.click("#elementId"); //click on element with the id "elementId";
     * await gondola.click("Login"); //click on button or link containing "Login";
     * await gondola.click({name : "submit"}, "#user>form");
     * ```
     */
    click(element: string | ILocator, context?: string): void;
    /**
     * Checks that the title of a window/page is equal to the provided one.
     * The verify point is considered: Passed if the values match; otherwise the test result is: Failed.
     * @param {string} title The title attribute of the current document.
     * @example
     * ```typescript
     *
     * // Check for the existence of a window whose title is "Scrum Board"
     * await gondola.checkWindowExist("Scrum Board");
     * ```
     */
    checkWindowExist(title: string): void;
    /**
     * Retrieves an attribute from each of the located elements.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string[]} attribute attribute name.
     * @example
     * ```typescript
     *
     * let value = await gondola.getElementsAttribute("#buttonId", "value");
     * ```
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    getElementsAttribute(element: string | ILocator, attribute: string): Promise<string[]>;
    /**
     * Opens a new tab and switches to it.
     * @example
     * ```typescript
     *
     * gondola.openNewTab();
     * ```
     */
    openNewTab(): void;
    /**
     * Executes a sync script on a page. Pass arguments to the function as additional parameters.
     * Returns the results. To receive the results you should use an `async` function
     * and `await`.
     * @param {Function} function function to be executed in browser context.
     * @param {any} args : list of arguments to pass to function.
     * @example
     * ```typescript
     *
     * await gondola.executeScript(function () {
     *      const element = document.getElementById('elementId');
     * });
     *
     * await gondola.executeScript(function (text) {
     *      const element = document.getElementById('elementId');
     *      element.innerText = text;
     * }, "hello");
     * ```
     */
    executeScript(fn: Function, ...args: any): Promise<any>;
    /**
     * Maximizes the current window. This method is for desktop browsers only.
     * @example
     * ```typescript
     *
     * gondola.maximize();
     * ```
     */
    maximize(): void;
    /**
     * Clears all cookies. If a cookie is specified, it only deletes that cookie.
     * @param {string} cookie (optional) cookie name.
     * @example
     * ```typescript
     *
     * gondola.deleteCookie();
     * gondola.deleteCookie("test");
     * ```
     */
    deleteCookie(cookie?: string): void;
    /**
     * Clicks on the active JavaScript native popup window, created by window.alert|window.confirm|window.prompt.
     * @param {string} option Click options:
     * + "ok": click on the accept button of the popup
     * + "cancel": click on the cancel button of the popup
     * @example
     * ```typescript
     *
     * gondola.clickPopup("ok");
     * ```
     */
    clickPopup(option: string): void;
    /**
     * Gets the text from a popup created by window.alert|window.confirm|window.prompt.
     * If no popup is visible, it returns an error.
     * @example
     * ```typescript
     *
     * let text = await gondola.getPopupText();
     * ```
     */
    getPopupText(): Promise<string>;
    /**
     * Retrieves a page title and returns it as string.
     * @example
     * ```typescript
     *
     * let title = await gondola.getTitle();
     * ```
     */
    getTitle(): Promise<string>;
    /**
     * Sets the text in a javascript prompt popup.
     * @param {string} value text use to set
     * @example
     * ```typescript
     *
     * gondola.setPopupText("I am testing popup");
     * ```
     */
    setPopupText(value: string): void;
    /**
     * Moves the mouse over the first element that matches the given locator. If the first parameter is null
     * then the page is used. If the second parameter is given, then the mouse is moved to an offset
     * based on the the element’s top-left corner. Otherwise, the mouse is moved to the center of the element.
     *
     * @param {string|ILocator} selectLocator located by CSS|XPath|ILocator.
     * @param {ICoordinate} offset offset from the element’s top-left corner or page.
     * @example
     * ```typescript
     *
     * const testControl = "//a[text()='Methods']";     *
     * // move mouse to the top-left corner of the element
     * await gondola.moveMouse(testControl);
     * // move mouse to the element, at offset (80,50)
     * await gondola.moveMouse(testControl, {x:80, y:50});
     * // move mouse at location (400,400) of current web page
     * await gondola.moveMouse({x:400, y:400});
     * ```
     */
    moveMouse(selectLocator: string | ILocator | ICoordinate, offset?: ICoordinate): void;
    /**
     * Does one of the following actions:
     *  1. Drags an element to a destination element.
     *  2. Drags an element to a destination coordinate on the page.
     *  3. Drags anything at a coordinate on the page to a destination element.
     *  4. Drags and drops between 2 coordinates on the page.
     *
     * @param {string|ILocator|ICoordinate} source located by CSS|XPath|ILocator, or a coordinate (x,y)
     * @param {string|ILocator|ICoordinate} destination located by CSS|XPath|ILocator, or a coordinate (x,y)
     * @param {string|ILocator} duration drag and drop time in milliseconds.
     * @experimental v1.5
     * &#62; Can be changed or removed soon
     * @example
     * ```typescript
     *
     * // Element to Element
     * await gondola.dragAndDrop(`//img[@class='document'][1]`, `//div[contains(@class,'trash')]`, 3000);
     * // Element to Coordinate
     * await gondola.dragAndDrop(`//img[@class='document'][1]`, {x:450, y:170}, 3000);
     * // Coordinate to Element
     * await gondola.dragAndDrop({x: 38, y: 210}, `//div[contains(@class,'trash')]`, 3000);
     *
     * // Coordinate to Coordinate
     * await gondola.dragAndDrop({x: 38, y: 280}, {x:450, y:170}, 4000);
     * ```
     */
    dragAndDrop(source: string | ILocator | ICoordinate, destination: string | ILocator | ICoordinate, duration?: number): void;
    /**
     * Opens a web page in a browser.
     * Requires a relative or absolute url.
     * If url starts with /, it opens a web page of a site defined by the url config parameter.
     * @param {string} url url path or global url.
     * @example
     * ```typescript
     *
     * gondola.navigate("http://google.com");
     * ```
     */
    navigate(url: string): void;
    /**
     * Reloads the current page.
     * @example
     * ```typescript
     *
     * gondola.refresh();
     * ```
     */
    refresh(): void;
    /**
     * Selects an option inside a dropdown-list with a specific index.
     *
     * @Note In case of cross-domain iFrame automation on mobile, "Same-origin Policy" prevents Appium from
     * automating iFrames that have a different domain to the parent. So, make your web application be testable,
     * please refer {@link http://appium.io/docs/en/advanced-concepts/cross-domain-iframes/ | this guide}
     * @param element located by CSS|XPath|strict locator.
     *
     * @param locator - the list control that contains the items, such as 'select' or 'ul' element.
     * @param index - option index (zero-based)
     * @example
     * ```typescript
     *  await gondola.selectByIndex(`//select[@id='lstComponents']`, 5);
     *  or
     *  // open drop down list
     *  await gondola.click(`//a[@class='u28ham']`);
     *  // select item by index
     *  await gondola.selectByIndex(`//h3[.='Generation']/following-sibling::ul`, 2);
     *
     * ```
     */
    selectByIndex(locator: string | ILocator, index: number): void;
    /**
     * Scrolls the element's parent container so the element is visible to the user.
     * @param locator - located by CSS|XPath|ILocator.
     * @param scrollIntoViewOptions (optional) Boolean type
     *        - If true, the top of the element will be aligned to the top of the visible area of the scrollable ancestor.
     *          Corresponds to scrollIntoViewOptions: {block: "start", inline: "nearest"}. This is the default value.
     *        - If false, the bottom of the element will be aligned to the bottom of the visible area of the scrollable ancestor.
     *          Corresponds to scrollIntoViewOptions: {block: "end", inline: "nearest"}.
     * @param scrollIntoViewOptions (optional) Object with the following properties:
     *         - "behavior": (optional) Defines the transition animation. Can be "auto" or "smooth". Defaults to "auto".
     *         - "block": (optional) Defines vertical alignment. Can be "start", "center", "end", or "nearest". Defaults to "start".
     *         - "inline": (optional) Defines horizontal alignment. Can be "start", "center", "end", or "nearest". Defaults to "nearest".
     *
     * @example
     * ```typescript
     *
     * const testElement = `//h3[@id='scrollintoview']`;
     * await gondola.scrollIntoView(testElement);
     * await gondola.scrollIntoView(testElement, false);
     * await gondola.scrollIntoView(testElement, {block: "center", inline: "center"});
     *
     * ```
     */
    scrollIntoView(locator: string | ILocator, scrollIntoViewOptions?: boolean | IScrollIntoViewOptions): void;
    /**
     * Scrolls to a particular set of coordinates inside a given element.
     * @param locator located by CSS|XPath|ILocator.
     * @param offsetX (optional, 0 by default) X-axis offset.
     * @param offsetY (optional, 0 by default) Y-axis offset.
     * @example
     * ```typescript
     *
     * const panelElement = `//div[@class='post']/article/div`;
     * // go to top-left element
     * await gondola.scrollTo(panelElement);
     * // scroll to a location inside element
     * await gondola.scrollTo(panelElement, 0 , 1000);
     * ```
     */
    scrollTo(locator: string | ILocator, offsetX?: number, offsetY?: number): void;
    /**
     * Switches focus to a particular tab using its number. It waits for all tabs to load before switching.
     * @param option "previous" | "next" indicate prev or next tab will be switch
     * @param num (optional, default 1) offset from current handle index in sequence window handle.
     * @experimental v1.5
     * &#62; Can be changed or removed soon. This action does not work well on Safari.
     * @example
     * ```typescript
     *
     * gondola.switchBrowserTab("next");
     * ```
     */
    switchBrowserTab(option: string, num?: number): void;
    /**
     * Switches the context to another frame. In the case of a null locator it reverts to the parent frame.
     *
     * Note: In the case of cross-domain iFrame automation on mobile, "Same-origin Policy" prevents automated test tools
     * from automating iFrames which have a different domain than their parent. To make your web application testable,
     * please make sure that all cross-domain-iframe problems are bypassed.
     * @param element located by CSS|XPath|strict locator.
     * @example
     * ```typescript
     *
     * gondola.switchFrame(`//iframe[@src="https://paciellogroup.com"]`);
     * ```
     */
    switchFrame(element?: string | ILocator): void;
    /**
     *
     * Switches to the window with the specified handle.
     * @param {string} handle a string representing a window handle, should be one of the strings that was returned in a call to getAllWindowHandles
     * @example
     * ```typescript
     *
     * const handles = await gondola.getAllWindowHandles();
     * await gondola.switchToWindow(handles[0]);
     * ```
     */
    switchToWindow(handle: string): Promise<void>;
    /**
     * Performs right click on a clickable element matched by semantic locator, CSS or XPath.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string|ILocator} context (optional) element to search in CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * await gondola.rightClick("#elementId"); //right click on element with the id "elementId";
     * await gondola.rightClick("Login"); //right click on button or link containing "Login";
     * await gondola.rightClick({name : "submit"}, ".context"); //right click on element with name "submit" inside element ".context"
     * ```
     */
    rightClick(element: string | ILocator, context?: string | ILocator): Promise<void>;
    /**
     * Performs a double-click on an element matched by CSS|XPath|ILocator. The context can be specified as second parameter to narrow the search.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string|ILocator} context (optional) element to search in CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * await gondola.doubleClick("#elementId") //double click on element with the id "elementId";
     * await gondola.doubleClick("Login"); //double click on button or link containing "Login";
     * await gondola.doubleClick({name : "submit"}, ".context"); //double click on element with name "submit" inside element ".context"
     * ```
     */
    doubleClick(element: string | ILocator, context?: string | ILocator): Promise<void>;
    /**
     * Gets a list attributes of an element matched by CSS|XPath|ILocator. The context can be specified as second parameter to narrow the search.
     * @param {string | ILocator} element located by CSS|XPath|ILocator.
     * @param {string[]} attributes name of array attributes
     * @param {string | ILocator} context (optional) element to search in CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * const result = await gondola.getElementAttributes("#elementId", ["name", "id", "class", "value"]);
     * const result = await gondola.getElementAttributes("Login", ["name", "id", "class", "value"]);
     * const result = await gondola.getElementAttributes({name : "submit"}, ["name", "id", "class", "value"], ".context");
     * ```
     */
    getElementAttributes(element: string | ILocator, attributes: string[], context?: string | ILocator): Promise<{
        [key: string]: any;
    }>;
    /**
     * Gets the width, height and location of given locator.
     * @param {string | ILocator} element located by CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * const rect = await gondola.getElementBounds("#elementID");
     * // sample value { left: 226, top: 89, width: 527, height: 220 }
     *
     * ```
     */
    getElementBounds(element: string | ILocator): Promise<IRect>;
    /**
     * Returns a list of window handles for every open top-level browsing context.
     * Useful for referencing a specific handle when calling gondola.switchToWindow(handle)
     * @example
     * ```typescript
     *
     * const handles = await gondola.getAllWindowHandles();
     * ```
     */
    getAllWindowHandles(): Promise<string[]>;
    /**
     * Returns the window handle for the current top-level browsing context.
     * It can be used as an argument for switchToWindow().
     * @example
     * ```typescript
     *
     * const handle = await gondola.getCurrentWindowHandle();
     * ```
     */
    getCurrentWindowHandle(): Promise<string>;
    /**
     * Gets the current driver's browser object
     * @example
     * ```typescript
     *
     * const browser = await gondola.getCurrentBrowser();
     * ```
     */
    getCurrentBrowser(): any;
    /**
     * Waits for an element's property have an expected value. At this time it only supports the "Webdriver" helper
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string} propName property name
     * @param {any} propValue  property's expected value
     * @param {number} timeout (optional, default : 1s) time for waiting(seconds), uses smartwait as the timeout if timeout is not specified.
     * @param {string|Ilocator} context (optional) element to search in for the CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * await gondola.waitForElementProperty("#id", "value", "exampleValue", 5); //wait up to 5 secs for the property "value" of the element "#id" to have the value "exampleValue".
     * await gondola.waitForElementProperty("#id", "value", "exampleValue", 5, ".context");  //wait up to 5 secs for the property "value" of the element "#id" in element ".context" to the have the value "exampleValue".
     * ```
     */
    waitForElementProperty(element: string | ILocator, propName: string, propValue: any, timeout?: number, context?: string | ILocator): Promise<void>;
    /**
     * Waits for an element's property to change value. At this time it only supports the "Webdriver" helper
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string} propName property name
     * @param {any} oldValue (optional) if current propValue doesn't equal oldValue, it will stop waiting.
     * @param {number} timeout (optional, default : 1s) time for waiting(seconds), uses smartwait as the timeout if timeout is not specified.
     * @param {string|Ilocator} context (optional) element to search in CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * await gondola.waitForValueChanged("#id", "value", "exampleValue", 5); //wait up to 5 secs for the property "value" of the element "#id" to have the value "exampleValue".
     * await gondola.waitForValueChanged("#id", "value", "exampleValue", 5, ".context"); //wait up to 5 secs for the property "value" of the element "#id" in element ".context" to the have the value "exampleValue".
     * ```
     */
    waitForValueChanged(element: string | ILocator, propName: string, oldValue?: any, timeout?: number, context?: string | ILocator): Promise<void>;
    /**
     * Waits for text appear in an html page. If context is specified, just wait for text appear in the context's container
     * @param {string} text text to wait for.
     * @param {string|ILocator} context (optional) element to narrow search CSS|XPath|ILocator.
     * @param {number} timeout (optional) time for waiting (seconds), uses smartwait as the timeout if timeout isn't specified.
     * @example
     * ```typescript
     *
     * await gondola.waitForText("Hello gondola"); //wait for text "Hello gondola" appear in html page
     * await gondola.waitForText("Hello gondola", "#abc") //wait for text "Hello gondola" appear in container with the id "abc"
     * await gondola.waitForText("Hello gondola", undefined, 3) //wait for 3 seconds for the text "Hello gondola" appear in an html page
     * ```
     */
    waitForText(text: string, context?: string | ILocator, timeout?: number): Promise<void>;
    /**
     * Waits a number of seconds for an element to become clickable.
     * @param {string|ILocator} element element located by CSS|XPath|ILocator.
     * @param {number} timeout (optional, default : 1s) time for waiting(seconds), uses smartwait as the timeout if timeout is not specified.
     * @example
     * ```typescript
     *
     * await gondola.waitForClickable("#btnLogin", 5); //waits 5 seconds for an element with id "btnLogin" to become clickable
     * await gondola.waitForClickable("#btnLogin"); //waits for element with id "btnLogin" to become clickable, uses smartwait as the timeout based on your configuration.
     * ```
     */
    waitForClickable(element: string | ILocator, timeout?: number): Promise<void>;
    /**
     * Waits for the value attribute to equal the specified value
     * @param {string|ILocator} element element whose value attribute we're using
     * @param {string} value text that we're waiting the the value attribute to be equal to
     * @param timeout (optional, default : 1s) time for waiting(second), uses smartwait as the timeout if a timeout is not specified.
     * @example
     * ```typescript
     *
     * await gondola.waitForValue("#idElement", "hello"); //wait for element with id "idElement" have text "hello" in "value" attribute with default wait time
     * await gondola.waitForValue("#idElement", "hello", 5); //wait for element with id "idElement" have text "hello" in "value" for no more than 5 seconds
     * ```
     */
    waitForValue(element: string | ILocator, value: string, timeout?: number): Promise<void>;
    /**
     * Waits for element to be enabled (by default waits for 1sec). Element can be located by CSS|XPath|ILocator.
     * @param {string|ILocator} element to be enabled.
     * @param {number} timeout (optional, default : 1s) time for waiting(seconds), uses smartwait as the timeout if a timeout is not specified.
     * @example
     * ```typescript
     *
     * await gondola.waitForEnabled("#ele", 5); //waits for element have id "ele" enabled in 5 seconds
     * await gondola.waitForEnabled("#ele"); //waits for element with id "ele" enabled, uses smartwait as the timeout based on your configuration.
     * ```
     */
    waitForEnabled(element: string | ILocator, timeout?: number): Promise<void>;
    /**
     * Waits for a function to return true.
     * @param fn callback function will be executed
     * @param {number} timeout (optional, default : 1s) time to wait in seconds.
     * @param {number} interval (optional, default : 1s) interval between checking the conditional in seconds.
     * @example
     * ```typescript
     *
     * // waits for page title equal 'LogiGear' in 20 seconds. Checks condition every 5 seconds.
     * await gondola.waitUntil(async () => await gondola.getTitle() == "LogiGear", 20, 5);
     * ```
     */
    waitUntil(fn: Function, timeout?: number, interval?: number): Promise<void>;
    /**
     * Sets one cookie for the current page. Make sure you are on the page that should receive the cookie.
     * @param {object} cookie a cookie object.Uses cookie format https://w3c.github.io/webdriver/#cookies
     * @example
     * ```typescript
     *
     * await gondola.setCookie({name: "id", value:"userId"});
     * ```
     */
    setCookie(cookie: object): Promise<void>;
    /**
     * Gets the current URL from the browser
     * @example
     * ```typescript
     *
     * const url = await getCurrentUrl();
     * ```
     */
    getCurrentUrl(): Promise<string>;
    /**
     * Presses a key in the browser (on a focused element).
     * To press a key in combination with modifier keys, pass the sequence as an array
     * @param {string|string[]} key or array of keys to press. Can use enum KeyCode to input key.
     * @example
     * ```typescript
     *
     * await gondola.pressKey("Z"); //press key "Z" to focused control
     * await gondola.pressKey("Tab"); //press key "Tab" to focused control
     * await gondola.pressKey(KeyCode.Tab) ; //press key "Tab" to focused control use enum KeyCode
     * await gondola.pressKey([KeyCode.Control, "a"]); //press combine key ctrl+a
     * ```
     */
    pressKey(key: string | string[]): Promise<void>;
    /**
     * Attaches a file to an element
     * @param {string|Ilocator} element element will be attached. It can be located by CSS|XPath|ILocator.
     * @param {string} filePath path of attached file. This path is relative to the current project directory (where package.json is located)
     * @example
     * ```typescript
     *
     * await gondola.attachFile("#ele","textFile.txt"); //attach file {projectDir}/textFile.txt to element #ele
     * ```
     */
    attachFile(element: string | ILocator, filePath: string): Promise<void>;
}
/**
 * Set of common actions supported by gondola
 */
export interface IGondola {
    /**
     * Tests for deep equality between the actual and expected parameters.
     * If objects are strictly equal, the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param actual actual value
     * @param expected expected value
     * @param message (optional) message will throw if the values are not strictly equal
     * @example
     * ```typescript
     *
     * let value = await gondola.getText("#elementId");
     * gondola.checkEqual(value, "Hello");
     * gondola.checkEqual(value, "Hi", "value should be 'Hi'");
     * ```
     */
    checkEqual<T>(actual: T, expected: T, message?: string): void;
    /**
     * Tests for deep strict inequality.
     * If objects are not strictly equal, the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param actual actual value
     * @param expected expected value
     * @param message (optional) message will throw if the values are strictly equal
     * @example
     * ```typescript
     *
     * let value = await gondola.getText("#elementId");
     * gondola.checkNotEqual(value, "Hello");
     * gondola.checkNotEqual(value, "Hi", "value should not equal 'Hi'");
     * ```
     */
    checkNotEqual<T>(actual: T, expected: T, message?: string): void;
    /**
     * Checks if a control exists.
     * If the control is found, the verify point is considered: Passed; otherwise the test is: Failed.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     *  // check if a control with id "elementId" exists .
     * await gondola.checkControlExist("#elementId");
     *
     *  // check if a control containing "Login" exists.
     * await gondola.checkControlExist("Login");
     *
     *  // check if control that has the attribute "name=submit" exists.
     * await gondola.checkControlExist({name: "submit"});
     * ```
     */
    checkControlExist(element: string | ILocator): void;
    /**
     * Checks if a control does not exist.
     * If the specified control is not found,
     * the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * // check if a control with the id "elementId" does not exists .
     * await gondola.checkControlNotExist("#elementId");
     *
     * // check if a control containing "Login" does not exists.
     * await gondola.checkControlNotExist("Login");
     *
     * // check if a control that has attribute "name=submit"  does not exists.
     * await gondola.checkControlNotExist({name : "submit"});
     * ```
     */
    checkControlNotExist(element: string | ILocator): void;
    /**
     * Checks if the first element with given locator has an attribute whose value matches the provided one.
     * The verify point is considered: Passed if the values match; otherwise the test result is: Failed.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string} attribute Element's attribute to be retrieved.
     * @param {string|boolean|number|object} value Expected value of the attribute.
     * @example
     * ```typescript
     *
     * // Compare the value of attribute "name" from a control with id "buttonId1" against an expected value.
     * await gondola.checkControlProperty("#buttonId1","name","Button 1");
     * ```
     */
    checkControlProperty(element: string | ILocator, attribute: string, value: string | boolean | number | object): void;
    /**
     * Retrieves text from the specified element.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * // Get the text from control with xpath.
     * await gondola.getText({"xpath":"//input[@name='button_ControlTest']"});
     * ```
     */
    getText(element: string | ILocator): Promise<string>;
    /**
     * Checks if text from the located element matches a given value.
     * The verify point is considered: Passed if the values match; otherwise the test result is: Failed.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * // Compare the text from a control located by an xpath with an expected value.
     * await gondola.checkText({"xpath":"//input[@name='button_ControlTest']"},"ButtonTest");
     * ```
     */
    checkText(element: string | ILocator, value: string): void;
    /**
     * Returns a Boolean value to indicate whether or not the specified control is found.
     * Returns a Boolean value of ``true`` if the control is found. Otherwise it returns ``false``.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @example
     * ```typescript
     *
     * // Returns `true` if the control with id "button_ControlTest" exists.
     * let variable = await gondola.doesControlExist("#button_ControlTest");
     * ```
     */
    doesControlExist(element: string | ILocator): Promise<boolean>;
    /**
     * Fills a text field or &lt;textarea&gt; with the given string. If there is already text, it will be cleared first.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string} Value to be entered.
     * @example
     * ```typescript
     *
     * await gondola.enter({"xpath":"//input[@name='textBox_ControlTest']"},"This is example");
     * ```
     */
    enter(element: string | ILocator, value: string): void;
    /**
     * Retrieves a value from the located element and returns a string.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * In case mobile, only works iOS
     * @example
     * ```typescript
     *
     * let value = await gondola.get("#buttonId");
     * ```
     */
    get(element: string | ILocator): Promise<string>;
    /**
     * Gets the current desired capabilities.
     * @example
     * ```typescript
     *
     * const capabilities = await gondola.getCapabilities();
     * if (capabilities.platformName === "android"){
     *      // Do something
     * }
     *  ```
     */
    getCapabilities(): Promise<any>;
    /**
     * Retrieves a attribute from the first element with a specified locator.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string} property property name.
     * @example
     * ```typescript
     *
     * let hrefValue = await gondola.getControlProperty("//a[.='Home']", "innerText");
     * ```
     */
    getControlProperty(element: string | ILocator, property: string): Promise<any>;
    /**
     * Returns the number of visible elements in the control found with the supplied locator.
     * @param {string|ILocator} element located by CSS|XPath|ILocator
     * @example
     * ```typescript
     *
     * // Get visible elements in control with id "buttonId1"
     * await gondola.getElementCount("#buttonId1");
     * ```
     */
    getElementCount(element: string | ILocator): Promise<number>;
    /**
     * Gets the selected items in list box or combo box defined by the HTML &#60;select&#62; tag.
     * @param {string|ILocator} selectLocator located by CSS|XPath|ILocator
     * @returns {[string]} text values of selected items.
     * @example
     * ```typescript
     *
     * const item = await gondola.getSelectedItems("#selectElementId");
     * ```
     */
    getSelectedItems(selectLocator: string | ILocator): Promise<string[]>;
    /**
     * Saves a screenshot of the current browsing context to a PNG file and put into the output folder (set in gondola.json).
     * Be aware that, if we set the 'fullPage' value to 'true', some browser drivers take screenshots of
     * the whole document (e.g. Geckodriver-Firefox and Safaridriver) and others only of the current viewport (e.g. Chromedriver).
     * @param fileName file name to save.
     * @param fullPage (optional) flag to enable fullscreen screenshot mode. Default value is false.
     * @example
     * ```typescript
     *
     * await gondola.saveScreenshot("screenshot.png");
     * await gondola.saveScreenshot("screenshotFullPage.png", true);
     * ```
     */
    saveScreenshot(fileName: string, fullPage?: boolean): void;
    /**
     * Selects items in a list box or a combo box that are defined by the HTML &#60;select&#62; tag.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {string|[string]} items text value of items will be selected.
     * @example
     * ```typescript
     *
     * gondola.select("#selectElementId", ["Green", "Red"]);
     * ```
     */
    select(element: string | ILocator, items: string | string[]): void;
    /**
     * Callback the [callback] when an error happens.
     * @param {Function} callback function to be executed upon the occurrence of an error.
     * @example
     * ```typescript
     *
     * gondola.setErrorHandler(async (errorInfo: IErrorInfo, actor: any) => {
     *      gondola.report(`Testcase: ${errorInfo.testCaseName} \
     * failed at step: ${errorInfo.testStepName} with error: ${errorInfo.errorMessage}`);
     * });
     * ```
     */
    setErrorHandler(callback: (errorInfo: IErrorInfo, actor: any) => void): void;
    /**
     * Sets the state for the specified checkbox/radio button.
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {boolean} value state to which to set the checkbox/radio button.
     * Allowable values:
     * + true: check the checkbox/radio
     * + false: un-check the checkbox/radio
     * @example
     * ```typescript
     *
     * // set State = true for the element "checkboxId"
     * gondola.setState("#checkboxId", true);
     * ```
     */
    setState(element: string | ILocator, value: boolean): void;
    /**
     * Pauses execution for a number of seconds.
     * @param sec time in seconds to wait.
     * @example
     * ```typescript
     *
     * gondola.wait(5);
     * ```
     */
    wait(sec: number): void;
    /**
     * Waits for an element to be removed from the DOM tree of a page (the default amount is  1 second).
     * @param locator element located by CSS|XPath|strict locator.
     * @param sec (optional) time in seconds to wait, 1 by default.
     * @example
     * ```typescript
     *
     * gondola.waitForDisappear("#buttonTest", 5);
     * ```
     */
    waitForDisappear(locator: string | ILocator, sec?: number): void;
    /**
     * Waits for an element to be present on the page (the default amount is 1 second).
     * @param {string|ILocator} element located by CSS|XPath|ILocator.
     * @param {number} sec (optional) time in seconds to wait
     * @example
     * ```typescript
     *
     * // Wait 5 seconds for an element with the id "#buttonTest" to be present on the page.
     * gondola.waitForElement("#buttonTest", 5);
     * ```
     */
    waitForElement(element: string | ILocator, sec?: number): void;
    /**
     * Gets a JSON value using its JSON path.
     * @param jsonObject
     * @param jsonPath
     * @returns array[] of found items or empty array if jsonPath does not exist
     * @example
     * ```typescript
     *
     * const data = [
     *  {
     *    id: 1,
     *    title: "This is title 1"
     *  },
     *  {
     *    id: 2,
     *    title: "This is title 2",
     *  }
     * ];
     *
     * const value = await gondola.getJSONValue(data, "[0].title");
     * ```
     */
    getJSONValue(jsonObject: any, jsonPath: string): any;
    /**
     * Checks a JSON value using its JSON path.
     * If they satisfy deep, strict equality,
     * the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param jsonObject
     * @param jsonPath
     * @param expected
     * @example
     * ```typescript
     *
     * const data = [
     *  {
     *    id: 1,
     *    title: "This is title 1"
     *  },
     *  {
     *    id: 2,
     *    title: "This is title 2",
     *  }
     * ];
     *
     * const value = await gondola.checkJSONValue(data, "[0].title", "This is title 1");
     * ```
     */
    checkJSONValue(jsonObject: any, jsonPath: string, expected: any): void;
    /**
     * Creates a report using using the the reporter set in gondola.json.
     * @param {string} description user-defined text or a caption of the image to put in the report.
     * @param {string} imagepath (optional) path to the image to put in the report.
     * @example
     * ```typescript
     *
     * gondola.report("This is a report")
     * ```
     * @experimental v1.3.
     * Only works with Mochawesome.
     */
    report(description: string, imagepath?: string): void;
}
/**
 * Set of Appium extended actions supported by Gondola
 */
export interface IGondolaMobile {
    /**
     * Taps on a mobile element.
     * @param {string | ILocator} element located by accessible id, xpath,... ILocator
     * @example
     * ```typescript
     *
     * gondola.tap("~accessibleId");
     * gondola.tap({id: "buttonId"});
     * gondola.tap({
     *      android: "//com.android.TextView[@text='myLabel']",
     *      ios: "~myId"
     * });
     * ```
     */
    tap(element: string | ILocator): void;
    /**
     * Runs the given function when testing on Android.
     *
     * Note: When using the capabilities option, your option must be
     * declared in the gondola config file for it to work.
     * @param options capabilities use to filter
     * @param function callback function will be executed
     * @example
     * ```typescript
     *
     * gondola.runOnAndroid(async () => {
     *      await gondola.tap("~accessibleId");
     *      // ...
     * });
     *
     * // Filter can be applied by checking for capabilities. This code only run on Android 7.0
     * gondola.runOnAndroid({platformVersion: '7.0'}, () =>{
     *      // ...
     * });
     *
     * // Capabilities can be checked by a function. In this case , code will be executed only on android >= 6
     * gondola.runOnAndroid((cap) => {return cap.platformVersion >= 6}, ()=>{
     *      // ...
     * });
     * ```
     */
    runOnAndroid(options?: any, Function?: Function): void;
    /**
     * Runs the given function when testing on iOS.
     *
     * Note: if you're using Appium's Desired Capabilities, you must have the
     * options set in ```gondola.json`` under the helpers->Appium->desiredCapabilities section.
     * @param options capabilities use to filter
     * @param Function callback function will be executed
     * @example
     * ```typescript
     *
     * gondola.runOnIOS(async () => {
     *      await gondola.tap("~accessibleId");
     *      // ...
     * });
     *
     * // Filter can be applied by checking for capabilities. This code only run on runOnIOS 6.0
     * gondola.runOnIOS({platformVersion: '6.0'}, () => {
     *      // ...
     * });
     *
     * // Capabilities can be checked by a function. In this case , code will be executed only on runOnIOS >= 6
     * gondola.runOnIOS((cap) => {return cap.platformVersion >= 6}, () => {
     *      // ...
     * });
     * ```
     */
    runOnIOS(options?: any, Function?: Function): void;
    /**
     * Checks if the specified app is installed.
     * If the specified app is installed,
     * the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param appPackageId app package name
     * @example
     * ```typescript
     *
     * gondola.checkAppIsInstalled("com.example.appName);
     * ```
     */
    checkAppIsInstalled(appPackageId: string): void;
    /**
     * Removed from build GFW 1.5.156 due to TASK 31528
     * Run subsequent actions on a specific device.
     * To run actions in parallel on all devices, use {@link runOnAllDevices}.
     *
     * **LIMITATION:** Currently, the user must wait for all currently running actions be completed
     * before switching devices.
     * @param deviceName the device name in multiremote configuration
     * @experimental v1
     * &#62; an be changed or removed soon
     */
    /**
     * Removed from build GFW 1.5.156 due to TASK 31528
     * Run all subsequent actions in parallel.
     *
     * **LIMITATION:** Currently, the user must wait for all currently running actions be completed
     * before switching devices.
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    /**
     * Gets the WebDriver browser.
     * @example
     * ```typescript
     *
     * const browser = await gondola.getCurrentBrowser();
     * const element = await browser.findElement("accessibility id", "exampleId");
     * * ```
     */
    getCurrentBrowser(): Promise<Client & Browser>;
    /**
     * Sends a key event to the device.
     * @param {number} keyValue Device specific key value
     *
     * List of keys: https://developer.android.com/reference/android/view/KeyEvent.html
     * LIMITATION: only supports Android
     * @example
     * ```typescript
     *
     * gondola.sendDeviceKeyEvent(3);
     * ```
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendDeviceKeyEvent(keyValue: number): void;
    /**
     * Retrieves an element's boundary.
     * @param {string | ILocator} element located by accessible id, xpath,... locator
     * @example
     * ```typescript
     *
     * let bound = await gondola.getElementBounds("~accessibleId");
     * let right = bound.left + bound.width;
     * let bottom = bound.top + bound.height;
     * ```
     */
    getElementBounds(element: string | ILocator): Promise<IRect>;
    /**
     * Performs a swipe on an element.
     * @param {string | ILocator} element located by accessible id, xpath,... ILocator
     * @param {number} offsetX
     * @param {number} offsetY
     * @param {number} duration time in seconds to swipe, default value is 1s.
     * @example
     * ```typescript
     *
     * await gondola.swipe("~accessibleId",0, -1000);
     * ```
     */
    swipe(element: string | ILocator, offsetX: number, offsetY: number, duration?: number): void;
    /**
     * Performs a swipe on the screen.
     * @param {number} startX
     * @param {number} startY
     * @param {number} offsetX
     * @param {number} offsetY
     * @param {number} duration time in seconds to swipe, default value is 1s.
     * @example
     * ```typescript
     *
     * await gondola.swipeByCoordinates(0, 0, 0, 600);
     * ```
     */
    swipeByCoordinates(startX: number, startY: number, offsetX: number, offsetY: number, duration?: number): void;
    /**
     * Hides the device keyboard
     * @param {string} strategy (Optional) desired strategy to close keyboard (‘tapOutside’ or ‘pressKey’ or ‘gTapOut’). ‘gTapOut’ only support for IOS
     * @param {string} key (Optional) desired key to use with strategy "pressKey"
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    hideDeviceKeyboard(strategy?: string, key?: string): void;
    /**
     * Gets device screen size
     * @example
     * ```typescript
     *
     * let screenSize = await gondola.getDeviceScreenSize();
     * ```
     */
    getDeviceScreenSize(): Promise<RectReturn>;
    /**
     * Gets a list of all available contexts
     * @example
     * ```typescript
     *
     * let allContext: string[] = await gondola.getAllContexts();
     * ```
     */
    getAllContexts(): Promise<string[]>;
    /**
     * Retrieves the current context
     * @example
     * ```typescript
     *
     * let currentContext: string = await gondola.getContext();
     * ```
     */
    getContext(): Promise<string>;
    /**
     * Switches to the specified context.
     * @example
     * ```typescript
     *
     * await gondola.switchToContext("NATIVE_APP");
     * ```
     */
    switchToContext(context: string): Promise<any>;
    /**
     * Executes a native mobile command.<br />
     * Reference: http://appium.io/docs/en/commands/mobile-command/.<br />
     * Security: https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md
     * @param {string} command command name
     * @param {(string | number | boolean | object | undefined)[]} args JSON serializable argument
     * @example
     * ```typescript
     * // get current app activity name
     * // full command: adb shell "dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'"
     * await gondola.runOnAndroid(async () => {
     *     const currentAppInfo = await gondola.executeCommand("mobile:shell", [{
     *         command: "dumpsys",
     *         args: [
     *             "window",
     *             "windows",
     *             "|",
     *             "grep",
     *             "-E",
     *             "'mCurrentFocus|mFocusedApp'",
     *         ],
     *     }]);
     *     console.log(currentAppInfo);
     * });
     *
     * // get battery info on iOS
     * await gondola.runOnIOS(async () => {
     *     const batteryInfo = await gondola.executeCommand("mobile:batteryInfo", []);
     *     console.log(batteryInfo);
     * });
     * ```
     */
    executeCommand(command: string, args?: Array<string | object | number | boolean | undefined>): Promise<any>;
    /**
     * Selects a scroll picker item or items.
     * <br />Supported Android controls:
     * <br />- android.widget.DatePicker
     * <br />- android.widget.NumberPicker
     * <br />Supported iOS controls:
     * <br />- XCUIElementTypeDatePicker
     * <br />- XCUIElementTypePickerWheel
     * @param element
     * @param value
     * @experimental v1
     * &#62; For IOS SDK version 12.x, use Xcode 11
     * @example
     * ```typescript
     * // Single item: pickerElement is a day, month or year that is a child control of a picker
     * await gondola.setPickerValue(pickerElement, "item name");
     *
     * // Multiple items: pickerElement is a picker control. It does not include any child controls.
     * await gondola.setPickerValue(pickerElement, ["one", "two", "three"]);
     *
     * // Multiple items that contain an undefined item: the undefined item will not change
     * // and pickerElement is a picker control. It does not include any child controls.
     * await gondola.setPickerValue(pickerElement, ["one", undefined, "three"]);
     *
     * ```
     */
    setPickerValue(element: string | ILocator, value: string | Array<string | undefined>): Promise<void>;
}
/**
 * Set of actions to interact with Rest API endpoints supported by Gondola
 * @experimental v1
 * &#62; Can be changed or removed soon
 */
export interface IRestApi {
    /**
     * Sets the timeout for the request.
     * @param {number} newTimeout timeout in milliseconds
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    setRequestTimeout(newTimeout: number): void;
    /**
     * Sends a GET request.
     * @param url {string} endpoint address
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendGetRequest(url: string, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a POST request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendPostRequest(url: string, payload: {}, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a PATCH request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendPatchRequest(url: string, payload: {}, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a PUT request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendPutRequest(url: string, payload: {}, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a DELETE request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendDeleteRequest(url: string, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Parses response data.
     * @param response {any} data response from server
     * @param expected {number} expected status value
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    checkResponseStatus(response: any, expected: number): void;
}
/**
 * Helper for resemble.js, used for image comparison in tests supported by Gondola.
 * @experimental v1
 * &#62; Can be changed or removed soon
 */
export interface IResemble {
    /**
     * Shows the Visual Difference between the Base Image and a Screenshot Image
     * @param baseImage {string} Name of the Base Image (Base Image path is taken from Configuration)
     * @param options {any} Options ex {prepareBaseImage: true, tolerance: 5} along with Resemble JS Options,
     * read more here: https://github.com/rsmbl/Resemble.js
     * @returns {Promise<any>}
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    seeVisualDiff(baseImage: string, options: any): any;
    /**
     * Shows the Visual Diff for an Element on a Page.
     * @param selector {string} Selector which has to be compared, CSS|XPath|ID
     * @param baseImage {string} Base Image for comparison
     * @param options {any} Options ex {prepareBaseImage: true, tolerance: 5} along with Resemble JS Options,
     * read more here: https://github.com/rsmbl/Resemble.js
     * @returns {Promise<any>}
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    seeVisualDiffForElement(selector: string | ILocator, baseImage: string, options: any): any;
}
